/*
Widget:   q4.stockQuote
Version:  1.0.9
Compiled: 2018-06-26
*/
! function(a) {
    a.widget("q4.stockQuote", {
        options: {
            items: 1,
            stock: [],
            lookupIndex: 1,
            useFullStockQuote: !0,
            useXignite: !1,
            usePublic: !1,
            apiKey: "",
            changeCls: ["module-stock_down", "module-stock_up"],
            loadingMessage: '<p class="module_loader"><i class="q4-icon_spinner"></i><span class="sr-only">Loading ...</span></p>',
            dateFormat: "MM d, yy",
            url: "",
            noDataTpl: "There are no results for current exchange/symbol",
            stockTpl: '{{#.}}<h4 class="module-stock_lookup-title"><span class="module-stock_indice">{{exchange}}: {{symbol}}</span></h4><div class="module_container module_container--content grid--no-gutter grid--no-space"><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_price">Price</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_price">{{tradePrice}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_change">Change</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_change {{uod}}"><span class="module-stock_indicator">{{uodSymbol}}</span>{{change}}</span></span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"> <span class="module-stock_volume">Volume</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_volume">{{volume}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_percent-change">% Change</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_percent-change {{uod}}"><span class="module-stock_indicator">{{uodSymbol}}</span>{{percChange}}%</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_high">Intraday High</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_high">{{high}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_week-high">52 Week High</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_week-high">{{high52}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_low">Intraday Low</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_low">{{low}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_week-low">52 Week Low</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_week-low">{{low52}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_open">Today\'s Open</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_open">{{open}}</span></div><div class="module-stock_label grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_previous-close">Previous Close</span></div><div class="module-stock_value grid_col grid_col--1-of-4 grid_col--md-1-of-2 grid_col--sm-1-of-2"><span class="module-stock_previous-close">{{previousClose}}</span></div></div><div class="module-stock_date"><span class="module-stock_date-text">{{tradeDate}} {{tradeTime}}</span></div>{{/.}}',
            beforeRender: function(a, b) {},
            complete: function(a) {}
        },
        exchangeCodes: {
            NASDAQ: "XNAS",
            NASD: "XNAS",
            NYSE: "XNYS",
            TSE: "XTSE",
            TSX: "XTSE",
            "TSX-V": "XTSX"
        },
        _create: function() {
            var a = this,
                b = a.options;
            this.element.html(b.loadingMessage || ""), b.stock.length ? a._getStockQuote() : a._getStockIndice()
        },
        _buildParams: function() {
            return {
                serviceDto: {
                    ViewType: GetViewType(),
                    ViewDate: GetViewDate(),
                    StartIndex: 0,
                    RevisionNumber: GetRevisionNumber(),
                    LanguageId: GetLanguageId(),
                    Signature: GetSignature(),
                    ItemCount: this.options.items
                }
            }
        },
        _getStockIndice: function() {
            var b, c = this,
                d = c.options;
            "string" == typeof d.stock && (d.stock = [d.stock]), b = d.usePublic ? c._getData(d.url + "/feed/Lookup.svc/GetLookupList", {
                apiKey: d.apiKey,
                lookupType: "indices"
            }) : c._getData("/Services/LookupService.svc/GetLookupList", a.extend(c._buildParams(), {
                lookupType: "indices"
            })), b.fail(function(a, b, c) {
                console.error("Error fetching indice: " + c)
            }).done(function(a) {
                if (a.GetLookupListResult.length) {
                    var b = a.GetLookupListResult[d.lookupIndex - 1].Value,
                        e = a.GetLookupListResult[d.lookupIndex - 1].Text;
                    d.stock.push(b.split(":")[0] + ":" + b.split(":")[1], e.split(":")[0] + ":" + e.split(":")[1]), c._getStockQuote()
                } else d.usePublic ? d.url.length && d.apiKey.length ? console.log("There are no active indices on " + d.url) : console.log("Check that you have configured a valid url and apiKey") : console.log("There are no active indices")
            })
        },
        _addCommas: function(a) {
            a += "", x = a.split("."), x1 = x[0], x2 = x.length > 1 ? "." + x[1] : "";
            for (var b = /(\d+)(\d{3})/; b.test(x1);) x1 = x1.replace(b, "$1,$2");
            return x1 + x2
        },
        _convertTime: function(a) {
            var b = a.split(":"),
                c = b[0],
                d = "AM";
            return c >= 12 && (d = "PM", c -= 12), 0 === c && (c = 12), c + ":" + b[1] + " " + d
        },
        _getData: function(b, c) {
            return this.options.usePublic ? a.ajax({
                type: "GET",
                url: b,
                data: c,
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }) : a.ajax({
                type: "POST",
                url: b,
                data: JSON.stringify(c),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            })
        },
        _getStockQuote: function() {
            var b, c = this,
                d = c.options,
                e = d.stock[0],
                f = e.split(":")[0],
                g = e.split(":")[1],
                h = void 0 !== c.exchangeCodes[f] ? c.exchangeCodes[f] : f,
                i = d.useFullStockQuote ? "GetFullStockQuoteList" : "GetStockQuoteList";
            b = d.usePublic ? c._getData(d.url + "/feed/StockQuote.svc/" + i, {
                apiKey: d.apiKey,
                exchange: d.useXignite ? h : f,
                symbol: g,
                pageSize: d.items
            }) : c._getData("/services/StockQuoteService.svc/" + i, a.extend(c._buildParams(), {
                exchange: d.useXignite ? h : f,
                symbol: g
            })), b.fail(function(a, b, c) {
                console.error("Error fetching stock data: " + c)
            }).done(function(a) {
                a[i + "Result"].length && null != a[i + "Result"][0] ? (c.element.html(c._normalizeData(a[i + "Result"])), c._trigger("complete")) : c.element.html(c.options.noDataTpl)
            })
        },
        _normalizeData: function(b) {
            var c = this,
                d = c.options,
                e = {
                    items: []
                };
            return a.each(b, function(b, f) {
                var g = {
                    change: c._addCommas(f.Change.toFixed(2)),
                    high: c._addCommas(f.High.toFixed(2)),
                    high52: c._addCommas(f.High52.toFixed(2)),
                    low: c._addCommas(f.Low.toFixed(2)),
                    low52: c._addCommas(f.Low52.toFixed(2)),
                    open: c._addCommas(f.Open.toFixed(2)),
                    percChange: f.PercChange.toFixed(2),
                    previousClose: c._addCommas(f.PreviousClose.toFixed(2)),
                    tradeDate: a.datepicker.formatDate(d.dateFormat, new Date(f.TradeDate)),
                    tradeTime: c._convertTime(f.TradeDate.split(" ").pop()),
                    tradePrice: c._addCommas(f.TradePrice.toFixed(2)),
                    uod: "-" == f.Change.toString().charAt(0) ? d.changeCls[0] : d.changeCls[1],
                    uodSymbol: "-" == f.Change.toString().charAt(0) ? "" : "+",
                    volume: c._addCommas(f.Volume)
                };
                if (d.useFullStockQuote) {
                    var h = d.stock.length > 1 ? d.stock[1] : d.stock[0],
                        i = h.split(":")[0],
                        j = h.split(":")[1];
                    a.extend(g, {
                        companyName: f.CompanyName,
                        divAmount: f.DivAmount,
                        divFrequency: f.DivFrequency,
                        divYield: f.DivYield,
                        eps: f.EPS.toFixed(2),
                        exDivDate: f.ExDivDate,
                        exchange: i,
                        marketCap: f.MarketCap,
                        peRatio: f.PeRatio,
                        shareOut: f.ShareOut,
                        shareTraded: f.ShareTraded,
                        symbol: j,
                        tickerSymbol: f.TickerSymbol
                    })
                }
                e.items.push(g)
            }), c._trigger("beforeRender", null, e), Mustache.render(c.options.stockTpl, e.items)
        },
        destroy: function() {
            this.element.html("")
        },
        _setOption: function(a, b) {
            this._superApply(arguments)
        }
    })
}(jQuery);